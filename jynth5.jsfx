desc:midi-audio plucky synth
//tags: MIDI Audio synth
//author: Jimi Wills



/*
TODO:

Make the base algo with one node.
Change the node number dynamically?
Change the pluck position dynamically?
Change the pluck frequency/duration (time to get from rest to release)
Tune k



*/


slider1:-12<-120,6,1>Vol (dB)
//slider2:0<-200,200,0.1>Fine Tune (cents)
//slider3:1<0.01,10,0.01>Note length
//slider4:0<-2,10,0.01>Decay shape
//slider5:0<-5,5,0.01>Wave shape
//slider6:0<0,0.1,0.01>Vibrato depth
//slider7:1<1,10,0.1>Vibrato freq
//slider8:0<-2,1,0.01>Freq change
slider9:0<0,1,1{Enabled,Disabled}>Disable sustain

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output    
@init
    frame_size = 1024;

    NOTE_OFF = 8;
    NOTE_ON = 9;    
    
    max_number_nodes = 9;
    
    node_array_size = frame_size*max_number_nodes;
    
    note_stt = frame_size;  // array for storing note pos    
    note_vel = note_stt + frame_size;  // array for storing velocity    
    note = note_vel + frame_size; // array for storing actual note value
    note_m = note + frame_size*max_number_nodes;  // array for storing node positions
    note_v = note_m + frame_size*max_number_nodes;  // array for storing node velocities
    note_phase = note_v + frame_size; // array for storing node phase (pluck vs release)
    // 0 = nothing or pluck, 1 = vibrate
    
    number_nodes = max_number_nodes;
    pluck_node = 0;
    
    note_i = 0;
    
    vibpos = 0;
    
    plucktime = 40;
    plucksamples = plucktime/1000 * srate;
    
    tension = 0.0016;
    drag = 0.9999;
    dampen = 0.999;
    
    
    // note that the number is the position in memory of the top of the array
    // and it stores doubles!


@slider
    vol=2 ^ (slider1/6);
    //adjbase = 440*2.0*$pi*(2^(slider2/1200))/srate;
    //vibadj = slider7*2.0*$pi/srate;
    //attack = 0.99^(1/(2^slider3));  
    //note_length_t = slider3;
    //note_length_s = note_length_t * srate; // samples
    
    //decayshape = (2^slider4);
    //waveshape = (2^slider5);
    //fc = slider8;
    //fc_sign = fc < 0 ? -1 : 1;
    //fc_abs = abs(fc);
    //direction = fc*fc*fc;

@sample

    i=0;            
    vibpos = vibpos + vibadj;
    vibpos > 2*$pi ? (vibpos = vibpos - 2*$pi );
    vib = slider6*sin(vibpos);
    
    while(
        
        note_stt[i] != 0 ? (
            
            note_tension = tension * 4^((note[i]-69)/12);
            
            pi = i*max_number_nodes + pluck_node;
            
            p = note_m[pi];
            
            (p < note_vel[i] && note_phase[i] == 0) ? (
              note_m[pi] += note_vel[i] / plucksamples;
            );
            
            (p >= note_vel[i] && note_phase[i] == 0) ? (
              note_phase[i] = 1;
            );
         
            (note_phase[i] > 0 && note_v[pi] == 0 && note_m[pi] == 0) ? (
              note_phase[i] = 0; 
              note_stt[i] = 0;
            );
      
      
          
            phase = note_phase[48];
          
            (note_phase[i] > 0) ? (
            
              j = 0;
              while(
                ni = i*max_number_nodes + j;
                li = ni - 1;
                ri = ni + 1;
              
                left = j == 0 ? 0 : note_m[li];
                right = j == number_nodes-1 ? 0 : note_m[ri];
                
                f = (-2)* note_m[ni] + left + right;
                 
                //point_tension = sqrt(note_tension^2 + (node_m[ni]*note_tension/10)^2);
                 
                note_v[ni] = (note_v[ni] + note_tension * f)*drag;
                (note_phase[i] == 2) ? (note_v[ni] *= dampen);
              
                j+=1;
                j<number_nodes
              );
              j = 0;
              while(
                ni = i*max_number_nodes + j;
                note_m[ni] += note_v[ni];
                j+=1;
                j<number_nodes
              );
              
            );
            tone1 = 0;
            tone2 = 0;// note_m[pi] * 50 * vol;
            j=0;
            while(
              x = (j+0.5)/(number_nodes);
              y = 1-x;
              ni = i*max_number_nodes + j;
              tone1 += x * note_m[ni] * vol;
              tone2 += y * note_m[ni] * vol;
              j+=1;
              j<number_nodes
            );
            
            spl0 = spl0+tone1;
            spl1 = spl1+tone2;
            
        
        );
        i+=1;
        i<1023
    );

@block

    while (
        input = midirecv(mpos, msg1, msg23);
        input ? (
            statusHi = (msg1/16)|0;
            statusLo = (msg1-(statusHi*16))|0;

            data2 = (msg23/256)|0;
            data1 = (msg23-(data2*256))|0;

            // .... for Note Ons
            statusHi == NOTE_ON && data2 > 0 ? (
                
                note_stt[data1] = 1;
                note_vel[data1] = data2/127;
                note[data1] = data1;                
                note_phase[data1] = 0;

            ):

            // .... for Note Offs
            (slider9 == 1 &&
            statusHi == NOTE_OFF || (statusHi == NOTE_ON && data2 == 0 )) ? (
                note_phase[data1] = 2;
            );
            midisend(mpos, msg1, msg23);
        );
        input;
    );



